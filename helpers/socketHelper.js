let ioInstance; // H√•ller socket.io-instansen s√• att den kan anv√§ndas globalt
let onlineUsers = {}; // Ett objekt d√§r nyckeln √§r userId och v√§rdet √§r socketId

// S√§tt upp socket.io och lyssna p√• events
const setupSocket = (io) => {
  // Spara instansen f√∂r senare anv√§ndning
  ioInstance = io; 

  io.on("connection", (socket) => {
    console.log("üîå Anv√§ndare ansluten:", socket.id);

    // N√§r en anv√§ndare registrerar sitt userId efter anslutning
    socket.on("register", (userId) => {
      console.log(`üë§ User ${userId} kopplad till socket ${socket.id}`);
      // Spara kopplingen
      onlineUsers[userId] = socket.id; 
    });

    //  N√§r en anv√§ndare kopplas fr√•n (t.ex. st√§nger fliken)
    socket.on("disconnect", () => {
      console.log("üîå Anv√§ndare fr√•nkopplad:", socket.id);
      // Ta bort anv√§ndaren fr√•n onlineUsers
      for (let user in onlineUsers) {
        if (onlineUsers[user] === socket.id) {
          delete onlineUsers[user];
        }
      }
    });
  });
};

// Skicka en notifikation till en viss anv√§ndare om hen √§r online
const sendNotification = (userId, message) => {
  // H√§mta socketId f√∂r userId
  const socketId = onlineUsers[userId]; 
  if (socketId && ioInstance) {
    // Skicka meddelande till r√§tt socket
    ioInstance.to(socketId).emit("notification", message);
    console.log(`üì¢ Notis skickad till User ${userId}: ${message}`);
  } else {
    // Anv√§ndaren √§r offline ‚Äì kan meddelandet spara i databasen ist√§llet
    console.log(`‚ö†Ô∏è User ${userId} √§r inte online. Notis sparas endast i databasen.`);
  }
};

// Exporterar funktionerna f√∂r att anv√§ndas i din server
module.exports = { setupSocket, sendNotification };
